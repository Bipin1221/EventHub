openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/events/:
    get:
      operationId: api_events_list
      description: View for managing event APIs.
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Comma separated list of category IDs to filter
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
          description: ''
    post:
      operationId: api_events_create
      description: View for managing event APIs.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventsDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventsDetailRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsDetail'
          description: ''
  /api/events/{event_pk}/sessions/:
    get:
      operationId: api_events_sessions_list
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSession'
          description: ''
    post:
      operationId: api_events_sessions_create
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventSessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventSessionRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSession'
          description: ''
  /api/events/{event_pk}/sessions/{id}/:
    get:
      operationId: api_events_sessions_retrieve
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event session.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSession'
          description: ''
    put:
      operationId: api_events_sessions_update
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event session.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventSessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventSessionRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSession'
          description: ''
    patch:
      operationId: api_events_sessions_partial_update
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event session.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEventSessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEventSessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEventSessionRequest'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSession'
          description: ''
    delete:
      operationId: api_events_sessions_destroy
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event session.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{event_pk}/venues/:
    get:
      operationId: api_events_venues_list
      parameters:
      - in: path
        name: event_pk
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'
          description: ''
    post:
      operationId: api_events_venues_create
      parameters:
      - in: path
        name: event_pk
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VenueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VenueRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
  /api/events/{event_pk}/venues/{id}/:
    get:
      operationId: api_events_venues_retrieve
      parameters:
      - in: path
        name: event_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    put:
      operationId: api_events_venues_update
      parameters:
      - in: path
        name: event_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VenueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VenueRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    patch:
      operationId: api_events_venues_partial_update
      parameters:
      - in: path
        name: event_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVenueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVenueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVenueRequest'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    delete:
      operationId: api_events_venues_destroy
      parameters:
      - in: path
        name: event_pk
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{id}/:
    get:
      operationId: api_events_retrieve
      description: View for managing event APIs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this events.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsDetail'
          description: ''
    put:
      operationId: api_events_update
      description: View for managing event APIs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this events.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventsDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventsDetailRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsDetail'
          description: ''
    patch:
      operationId: api_events_partial_update
      description: View for managing event APIs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this events.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEventsDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEventsDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEventsDetailRequest'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsDetail'
          description: ''
    delete:
      operationId: api_events_destroy
      description: View for managing event APIs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this events.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{id}/upload-image/:
    post:
      operationId: api_events_upload_image_create
      description: Upload an image to events.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this events.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventsImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventsImageRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsImage'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/user/create/:
    post:
      operationId: api_user_create_create
      description: Create a new user in the system.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/me/:
    get:
      operationId: api_user_me_retrieve
      description: Manage the authenticated user.
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_user_me_update
      description: Manage the authenticated user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_user_me_partial_update
      description: Manage the authenticated user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/token/:
    post:
      operationId: api_user_token_create
      description: Create a new auth token for user and send it via email.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      description: Serializer for the user auth token.
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - email
      - password
    AuthTokenRequest:
      type: object
      description: Serializer for the user auth token.
      properties:
        email:
          type: string
          format: email
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
      - email
      - password
    Category:
      type: object
      description: Serializer for category
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    CategoryRequest:
      type: object
      description: Serializer for category
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
      - name
    EventSession:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        available_seats:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        event_id:
          type: integer
          nullable: true
          readOnly: true
      required:
      - available_seats
      - end_time
      - event_id
      - id
      - start_time
    EventSessionRequest:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        available_seats:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
      required:
      - available_seats
      - end_time
      - start_time
    Events:
      type: object
      description: Serializer for events.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        event_dates:
          type: string
          format: date
        link:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date
        time:
          type: string
          format: time
        category:
          type: array
          items:
            $ref: '#/components/schemas/Category'
      required:
      - category
      - created_at
      - event_dates
      - id
      - time
      - title
    EventsDetail:
      type: object
      description: Serializer for event detail, including description.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        event_dates:
          type: string
          format: date
        link:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date
        time:
          type: string
          format: time
        category:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        description:
          type: string
        image:
          type: string
          format: uri
          readOnly: true
          nullable: true
      required:
      - category
      - created_at
      - event_dates
      - id
      - image
      - time
      - title
    EventsDetailRequest:
      type: object
      description: Serializer for event detail, including description.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        event_dates:
          type: string
          format: date
        link:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date
        time:
          type: string
          format: time
        category:
          type: array
          items:
            $ref: '#/components/schemas/CategoryRequest'
        description:
          type: string
      required:
      - category
      - created_at
      - event_dates
      - time
      - title
    EventsImage:
      type: object
      description: Serializer for uploading images to events.
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          format: uri
          nullable: true
      required:
      - id
      - image
    EventsImageRequest:
      type: object
      description: Serializer for uploading images to events.
      properties:
        image:
          type: string
          format: binary
          nullable: true
      required:
      - image
    PatchedEventSessionRequest:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        available_seats:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
    PatchedEventsDetailRequest:
      type: object
      description: Serializer for event detail, including description.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        event_dates:
          type: string
          format: date
        link:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date
        time:
          type: string
          format: time
        category:
          type: array
          items:
            $ref: '#/components/schemas/CategoryRequest'
        description:
          type: string
    PatchedUserRequest:
      type: object
      description: Serializer for the user object.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 128
        name:
          type: string
          minLength: 1
          maxLength: 255
    PatchedVenueRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        address:
          type: string
          minLength: 1
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
    User:
      type: object
      description: Serializer for the user object.
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        name:
          type: string
          maxLength: 255
      required:
      - email
      - name
    UserRequest:
      type: object
      description: Serializer for the user object.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 128
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
      - email
      - name
      - password
    Venue:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        address:
          type: string
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
      required:
      - address
      - capacity
      - id
      - name
    VenueRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        address:
          type: string
          minLength: 1
        capacity:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
      required:
      - address
      - capacity
      - name
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
